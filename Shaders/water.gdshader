shader_type canvas_item;

// samples the screen underneath water tiles
uniform sampler2D screen_texture: hint_screen_texture;

// noise texture for water distortion
uniform sampler2D noise_texture: filter_nearest, repeat_enable;

// speed of water waves
uniform vec2 speed = vec2(0.5, 0.2);

// strength of wave effect
uniform float wave_strength = 0.08;

// distortion strength
uniform float distortion = 0.01;

void vertex() {
	VERTEX.y += sin(TIME);
}

void fragment() {
	vec2 noise = 2.0 * texture(noise_texture, UV + speed * TIME).rg - vec2(1.0);
	COLOR = texture(TEXTURE, UV + noise * wave_strength);
	COLOR -= vec4(texture(screen_texture, SCREEN_UV + noise * distortion).rgb, 0);
}

//void light() {
//	// Called for every pixel for every light affecting the material.
//	// Uncomment to replace the default light processing function with this one.
//}
